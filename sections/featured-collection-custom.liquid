{%- if section.settings.enable_quick_add -%}
  <script src="{{ 'component-quick-add-to-cart-button.js' | asset_url }}" defer="defer"></script>
{%- endif -%}

<script src="{{ 'section-featured-collection.js' | asset_url }}" defer="defer"></script>

{%- capture section_settings -%}
{
  "layout": {{ section.settings.layout_mode | json }}
}
{%- endcapture -%}

{%- assign desktop_items_per_row = section.settings.grid_desktop_items_per_row -%}
{%- assign mobile_items_per_row  = section.settings.grid_mobile_items_per_row | times: 1 -%}

{%- assign collection = section.settings.collection -%}

{%- assign item_count = section.settings.grid_items_count -%}

<style type="text/css">
  section-featured-collection{
    display: block;
  }
</style>

<section-featured-collection class="Container Container--noGutter Container--fluid Container--spacing{{ section.settings.spacing_position }} FeaturedCollection"
   data-section-id="{{ section.id }}" data-section-settings='{{ section_settings }}'>

  {%- if section.settings.heading != blank or section.settings.button_label != blank -%}
    <header class="SectionHeader Container Container--fluid SectionHeader--horizontal">
      <div class="SectionHeader__Text">
        {%- if section.settings.heading != blank -%}
            <h2 class="SectionHeader__Heading CustomSize {{ section.settings.heading_font_size }}">{{ section.settings.heading }}</h2>
        {%- endif -%}
      </div>

      {%- if section.settings.button_label != blank -%} 
        <div class="SectionHeader__Button"> 
          <a href="{{ collection.url }}" class="SectionHeader__Button Button Button--underline">{{ section.settings.button_label | escape }}</a>        
        </div>
      {%- endif -%}
    </header>
  {%- endif -%}

    <div class="SectionBody__wrapper">

        <div class="ProductTagList Container" id="ProductTagList">
           <span class="ProductTag_btn active" onclick="handleChangeFilterTag('all')"> All</span> <br class="sp_br_display_none">
                 {% for tag in collection.all_tags %}
                <span class="ProductTag_btn" onclick="handleChangeFilterTag('{{ tag }}')">{{ tag }}</span>  <br class="sp_br_display_none">
                {% endfor %}  
        </div> 
    
      <div class="SectionBody FeaturedCollection__Body ProductListWrapper">
        {%- if collection != blank and collection != empty -%}
    
          {%- if collection.products_count < item_count -%}
            {%- assign item_count = collection.products_count -%}
          {%- endif -%}
    
            <div class="ProductList ProductListCustom ProductList--grid Grid">
              {%- for product in collection.products limit: item_count -%}
                <div class="Grid__Item 1/{{ mobile_items_per_row }}--small 1/{{ desktop_items_per_row }}--medium-up filterDiv all {% for tag in product.tags -%} {{ tag }} {%- endfor -%} ">
                  {% render 'product-card', product: product, show_rating: section.settings.show_rating, show_product_info: section.settings.show_product_info, show_vendor: section.settings.show_vendor, show_swatches: section.settings.show_swatches, show_quick_add: section.settings.enable_quick_add %}
                </div>
              {%- endfor -%}
            </div>
        {%- else -%}
    
        {%- endif -%}
      </div>
    </div>

    <div class="pagination"></div>

</section-featured-collection>

{% schema %}
{
  "name": "Products list custom",
  "settings": [
    {
      "type": "select",
      "id": "spacing_position",
      "label": "Spacing position",
      "options": [
        {
          "value": "None",
          "label": "None"
        },
        {
          "value": "Top",
          "label": "Top"
        },
        {
          "value": "Bottom",
          "label": "Bottom"
        },
        {
          "value": "Medium",
          "label": "Top and Bottom"
        }
      ],
      "default": "Medium"
    },
    {
      "type": "collection",
      "id": "collection",
      "label": "Collection"
    },
    {
      "type": "header",
      "content": "Section header"
    },
    {
      "type": "text",
      "id": "heading",
      "label": "Heading",
      "default": "Featured collection"
    },
    {
      "type": "text",
      "id": "button_label",
      "label": "Button label",
      "default": "View all products"
    },
    {
      "type": "header",
      "content": "Grid"
    },
    {
      "type": "range",
      "id": "grid_items_count",
      "min": 2,
      "max": 24,
      "step": 1,
      "label": "Maximum products to show",
      "default": 8
    },
    {
      "type": "range",
      "min": 2,
      "max": 6,
      "step": 1,
      "id": "grid_desktop_items_per_row",
      "label": "Number of columns on desktop",
      "default": 4
    },
    {
      "type": "select",
      "options": [
        {
          "value": "1",
          "label": "1"
        },
        {
          "value": "2",
          "label": "2"
        }
      ],
      "id": "grid_mobile_items_per_row",
      "label": "Number of columns on mobile",
      "default": "2",
      "info": "Visible when the ‘Layout’ setting is set to Grid."
    },
    {
      "type": "header",
      "content": "Product card"
    },
    {
      "type": "checkbox",
      "id": "show_product_info",
      "label": "Show product info",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_rating",
      "label": "Show product rating",
      "default": false,
      "info": "To display a rating, add a product rating app. [Learn more](https://help.shopify.com/manual/online-store/themes/theme-structure/theme-features#featured-collection-show-product-rating)"
    },
    {
      "type": "checkbox",
      "id": "show_vendor",
      "label": "Show vendor",
      "default": false
    },
    {
      "type": "checkbox",
      "id": "show_swatches",
      "label": "Show swatch",
      "default": false
    },
    {
      "type": "checkbox",
      "id": "enable_quick_add",
      "default": false,
      "label": "Enable quick add button"
    }
  ],
  "presets": [
    {
      "name": "Products list custom"
    }
  ]
}
{% endschema %}


<script>
const wrapper = document.querySelector(".ProductListCustom")
const pagination = document.querySelector(".pagination")
const items = Array.from(document.querySelectorAll(".filterDiv"))
let filteredItems = items;
let currPage = 1;

function handleChangeFilterTag(tag) {
   if (tag) {
    filteredItems = items.filter(el => {
      return el.classList.contains(tag)
    })
  } else {
    filteredItems = items
  }
  currPage = 1;

  console.log("length", filteredItems.length)
  if (filteredItems.length !== 0) {
    pagination.style.display = "flex";
    setHTML(filteredItems)
  } else {
    pagination.style.display = "none";
    wrapper.innerHTML = "<p>No Data Found.</p>"
  }
}

// Add active class to the current control button (highlight it)
var btnContainer = document.getElementById("ProductTagList");
var btns = btnContainer.getElementsByClassName("ProductTag_btn");
for (var i = 0; i < btns.length; i++) {
  btns[i].addEventListener("click", function() {
    var current = document.getElementsByClassName("active");
    current[0].className = current[0].className.replace(" active", "");
    this.className += " active";
  });
}

function paginate(totalItems, currentPage = 1, pageSize = 6, maxPages = 3) {

  let totalPages = Math.ceil(totalItems / pageSize);
  if (currentPage < 1) {
    currentPage = 1;
  } else if (currentPage > totalPages) {
    currentPage = totalPages;
  }

  let startPage, endPage;
  if (totalPages <= maxPages) {
    startPage = 1;
    endPage = totalPages;
  } else {
    let maxPagesBeforeCurrentPage = Math.floor(maxPages / 2);
    let maxPagesAfterCurrentPage = Math.ceil(maxPages / 2) - 1;
    if (currentPage <= maxPagesBeforeCurrentPage) {
      startPage = 1;
      endPage = maxPages;
    } else if (currentPage + maxPagesAfterCurrentPage >= totalPages) {
      startPage = totalPages - maxPages + 1;
      endPage = totalPages;
    } else {
      startPage = currentPage - maxPagesBeforeCurrentPage;
      endPage = currentPage + maxPagesAfterCurrentPage;
    }
  }

  let startIndex = (currentPage - 1) * pageSize;
  let endIndex = Math.min(startIndex + pageSize - 1, totalItems - 1);

  let pages = Array.from(Array((endPage + 1) - startPage).keys()).map(i => startPage + i);

  return {
    totalItems: totalItems,
    currentPage: currentPage,
    pageSize: pageSize,
    totalPages: totalPages,
    startPage: startPage,
    endPage: endPage,
    startIndex: startIndex,
    endIndex: endIndex,
    pages: pages
  };
}

function setHTML(items) {
  wrapper.innerHTML = ""
  pagination.innerHTML = ""
  const { totalItems, currentPage, pageSize, totalPages, startPage, endPage, startIndex, endIndex, pages } = paginate(items.length, currPage, 6, 3)

  const nav = document.createElement("nav")

  let paginationHTML = ""
  paginationHTML += `<button ${currentPage === 1 && 'disabled'} class="${currentPage === 1 ? 'cursor-not-allowed' : 'prev'}">
                <span class="prev">Prev</span>
            </button>`

  pages.forEach(page => {
    if (currentPage === page) {
      paginationHTML += `<button class="active" page="${page}" ${currentPage === page && 'disabled'}>${page}</button>`
    } else {
      paginationHTML += `<button class="page" page="${page}" ${currentPage === page && 'disabled'}>${page}</button>`
    }
  })

  paginationHTML += `<button ${currentPage === endPage && 'disabled'} class="${currentPage === endPage ? 'cursor-not-allowed' : 'next'}">
                <span class="next">Next</span>
            </button>`

  nav.innerHTML = paginationHTML

  if (totalItems <= pageSize ) {
     pagination.append('');
  } else {
      pagination.append(nav);
  }

  const start = (currentPage - 1) * pageSize, end = currentPage * pageSize;
  items.slice(start, end).forEach(el => {
    wrapper.append(el)
  })
}

document.body.addEventListener("change", function (e) {
  console.log(e.target);
})
document.addEventListener('click', function (e) {
  const $this = e.target
  console.log($this);
  if ($this.classList.contains("page")) {
    currPage = parseInt($this.getAttribute("page"))
    setHTML(filteredItems)
  }
  if ($this.classList.contains("next")) {
    currPage += 1;
    setHTML(filteredItems)
  }
  if ($this.classList.contains("prev")) {
    currPage -= 1;
    setHTML(filteredItems)
  }
});
setHTML(filteredItems)



</script>
